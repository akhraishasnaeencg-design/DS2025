# -*- coding: utf-8 -*-
"""DS1-HASNAE AKHRAIS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvQ6iAH8cUzRORGLU5Tm8yRKuN-3ei3b

#SOLUTION
CHANGEMENT DES PACKAGE
"""

# Installation via pip
!pip install pandas numpy matplotlib seaborn scikit-learn jupyter

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Charger un dataset en ligne (exemple : ventes d'une entreprise)
url = "https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv"
df = pd.read_csv(url)

# Afficher les premières lignes
print(df.head())

# Informations sur le dataset
print(df.info())

# Statistiques descriptives
print(df.describe())

# Statistiques pour une colonne spécifique
colonne = df['Value']  # Adapter selon vos données

print(f"Moyenne: {colonne.mean():.2f}")
print(f"Médiane: {colonne.median():.2f}")
print(f"Mode: {colonne.mode()[0]:.2f}")
print(f"Écart-type: {colonne.std():.2f}")
print(f"Variance: {colonne.var():.2f}")
print(f"Min: {colonne.min():.2f}")
print(f"Max: {colonne.max():.2f}")

# Quartiles
print(f"Q1 (25%): {colonne.quantile(0.25):.2f}")
print(f"Q2 (50% - Médiane): {colonne.quantile(0.50):.2f}")
print(f"Q3 (75%): {colonne.quantile(0.75):.2f}")
print(f"IQR: {colonne.quantile(0.75) - colonne.quantile(0.25):.2f}")

"""chargement de données"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Dans cette section, on va charger un jeu de données (dataset) à partir d'une source en ligne.
# Le fichier utilisé contient des informations sur le PIB (Produit Intérieur Brut) de différents pays.
# On utilise la bibliothèque pandas pour lire les données depuis une URL et les stocker dans un DataFrame.

"""

# Charger un dataset en ligne (exemple : ventes d'une entreprise)
url = "https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv"
df = pd.read_csv(url)

"""# --- Après le code ---
# À ce stade, les données ont été importées avec succès depuis le lien fourni.
# Le DataFrame 'df' contient désormais les informations du fichier CSV,
# prêtes à être explorées, analysées ou visualisées.
# On peut par exemple afficher les premières lignes avec : df.head()
"""

# Afficher les premières lignes
df

"""jeux de données"""

# Informations sur le dataset
print(df.info())

# Statistiques descriptives
print(df.describe())

"""configuration des données"""

# Statistiques pour une colonne spécifique
colonne = df['Value']  # Adapter selon vos données

"""code python-Statistique descriptives"""

# Statistiques pour une colonne spécifique
colonne = df['Value']  # Adapter selon vos données

#calcul de la moyenne
print(f"Moyenne: {colonne.mean():.2f}")
#calcul de  la médiane
print(f"Médiane: {colonne.median():.2f}")
#calcul du mode
print(f"Mode: {colonne.mode()[0]:.2f}")
#calcul de l'ecart-type
print(f"Écart-type: {colonne.std():.2f}")
#calcul de la variance
print(f"Variance: {colonne.var():.2f}")
#calcul  min
print(f"Min: {colonne.min():.2f}")
#calcul  max
print(f"Max: {colonne.max():.2f}")

# Configuration du style
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 8)

# Créer une figure avec plusieurs sous-graphiques
fig, axes = plt.subplots(2, 2, figsize=(14, 10))

# 1. Histogramme
axes[0, 0].hist(colonne, bins=30, edgecolor='black', alpha=0.7)
axes[0, 0].set_title('Distribution des valeurs', fontsize=14, fontweight='bold')
axes[0, 0].set_xlabel('Valeur')
axes[0, 0].set_ylabel('Fréquence')

# Ajouter la moyenne et la médiane
axes[0, 0].axvline(colonne.mean(), color='red', linestyle='--',
                   label=f'Moyenne: {colonne.mean():.2f}')
axes[0, 0].axvline(colonne.median(), color='green', linestyle='--',
                   label=f'Médiane: {colonne.median():.2f}')
axes[0, 0].legend()

# 2. Boxplot
axes[0, 1].boxplot(colonne.dropna(), vert=True)
axes[0, 1].set_title('Boxplot - Détection des outliers', fontsize=14, fontweight='bold')
axes[0, 1].set_ylabel('Valeur')

# 3. Densité
colonne.plot(kind='density', ax=axes[1, 0])
axes[1, 0].set_title('Courbe de densité', fontsize=14, fontweight='bold')
axes[1, 0].set_xlabel('Valeur')

# 4. QQ-plot (pour tester la normalité)
from scipy import stats
stats.probplot(colonne.dropna(), dist="norm", plot=axes[1, 1])
axes[1, 1].set_title('Q-Q Plot (Test de normalité)', fontsize=14, fontweight='bold')

plt.tight_layout()
plt.show()